vim
    important searching tip
      eg: %s/^.*\("dhcp_lease_id": \d\+\).*$/\1/gc
      https://stackoverflow.com/questions/34637021/vi-delete-everything-except-a-pattern
    save readonly file (without plugin, which has :SudoWrite):
        :w !sudo tee % 
    fzf
        search in..
            ,b: Buffers
            ,f: Files
            ,s: Lines (in open buffers)
            ,a: Ag
        do..
            ctrl-t: new tab
            ctrl-x: new split
            ctrl-v: new vsplit
        useful stuff
            when using Ag, can hit ? for a preview
            :Commits is a useful thing
    windows/panes
        ctrl hkjl 
            moves b/w panes
        ctrl-w = 
            resize to equal size
        ctrl-w o
            maximize pane and reverse (:only/:on to do this without being able to restore)
        :BC
            kills buffer, restores last one
        ctrl-w r
            swap panes
        ctrl-w ctrl-o :on [:only]
            close other splits
        :windo diffthis
            diff 2 buffers
            turn off with :windo diffoff (or just :diffoff)
        reload all buffers:
            ct [checktime] (custom cabbrev)
    editing/navigation
        ^
          go to beginning of text on line!!
        S
          deletes content of line and goes into insert. useful!
        J
          joins lines
        L
          unjoins lines
        =
            auto-indent line
            normally takes a motion, works on its own in visual mode, or == works on the line
        count search matches:
            :%s/pattern//gn (n is what makes it matter)
            can also do  normal / search followed by :%s///gn
        :%s/pattern//gn
            count matches
        :/\<query\>
            searches for whole word
    misc
        :Vexplore
            gives you a file browser
        ctrl-G
            show position
        ctrl-6
            previous file
        @@
            repeat macro
        motions inside things (eg in parens) can span multiple lines
        ctrl-z
            disable vim, drop to shell
            to resume vim (foreground): $ fg
        %!python -m json.tool
            format json in open buffer
    loclist - where ALE errors show (and lots of other things)
        :lop - open
        :lcl - close (or :q?)
        :lne - next one
        :lpr - prev one
    plugin management (vundle)
        :PluginInstall .... needs vim restarted for some reason
        :PluginUpdate (or PluginClean to remove dir) after removing from vim
    fugitive
        Git <cmd>
          execute arbitrary git cmd
        Gstatus 
          :G also activates it 
          summary of things
          can stage/unstage files with -
          can open hunks with = on a file, then 
            C-n/C-p to jump between
            s/u to stage/unstage
          more in :h fugitive-mappings
        Gblame - useful view of blame. can step through history of a line
          g? - brings up help
          - - (minus sign) - reblames at this commit
          P - reblames at the parent of this commit (eg its head)
        Gedit - opens readonly buffer of a git object
          4 types of git object
            blob (file) - branch:path
            tree (list of ... things in the tree?)
            commit (eg @ or SHA)
          % autocompletes to "path of current buffer" (general vim feature)
          Gsplit/Gvsplit open it in a split
          this has a lot of features 
            filenames and SHAs: press enter to go to
            can diff and view other things
        Gdiffsplit - index on left, working copy on right
          this is awesome with Gw for adding changes!!
          for conflicted merge, makes a 3 way split
          [c and ]c jump between changes
          :diffget and :diffput on a visual selection/line count to stage hunks
            NOTE: by default they only apply to the diff hunk! awesome!
            (diffput is stage)
            (better workflow: :do/:dp work on only one line (or the empty diff above).
             stay in the index buffer and use :do or range :diffget, since it makes more
             sense to be modifying the buffer you're in)
          3-way merge conflict resolution
            probably keep cursor in the middle
        Glog - shows all revisions of current file (in quickfix list)
          p different from git log 
          Glog -- opens all commits I think
          Glog -- % is all commits that touched current buffer
          copen opens quickfix window, then can jump to them
        Gcommit - same as normal git commit
        Ggrep - git grep but results go into quickfix window
          git grep can search through all git branches/etc
        Gwrite (convenience, saves + adds to index)
        Gread (convenience, checkout from index)
        
    has links to read sometime bored http://www.cse.psu.edu/~deh25/cmpsc311/Instructions/vi.html
    swap esc/caps: https://askubuntu.com/questions/363346/how-to-permanently-switch-caps-lock-and-esc
        setxkbmap -option caps:swapescape

fzf
    CTRL-e - Paste the selected files and directories onto the command-line (formerly CTRL-T)
        Set FZF_CTRL_T_COMMAND to override the default command
        Set FZF_CTRL_T_OPTS to pass additional options
    CTRL-R - Paste the selected command from history onto the command-line
        If you want to see the commands in chronological order, press CTRL-R again which toggles sorting by relevance
        Set FZF_CTRL_R_OPTS to pass additional options
    ALT-C - cd into the selected directory
        Set FZF_ALT_C_COMMAND to override the default command
        Set FZF_ALT_C_OPTS to pass additional options
    ag --noheading . | fzf (or ag --nobreak --nonumbers --noheading . | fzf)
        searches all text in dir

grep
    in continuous pipes (e.g. tail -f) - doesn't work due to buffering
        instead of: cmd | grep 'asfd'
        use: cmd | stdbuf -oL grep 'asdf' (line-buffered)
        or -o0 for no buffering
        or 'grep --line-buffered'

sed
    to replace (substitute): sed 's/MATCHREGEX/REPLACE WITH/OPTION'
        'g' option is global (not first on line)

curl
    -X: method (all caps)
        GET, PUT, etc
    -d: data (string)
        if you use a @before a filename it will read the file
    -H: headers
        "accept: application/json" - not sure what this does
    e.g.:
        $ curl -X POST "http://localhost:8000/orderprovisioning/" -H "accept: application/json" -H "Content-Type: application/json" -d @~/temp-cwb-0831-proc.json 
        this doesn't seem to work for some reason...

flask shell
    $ 'flask shell'
    ctx = app.test_request_context()
    ctx.push()
    app.preprocess_request()
    ... easier at least for dhcp adapter is to set up ipdb breakpoint in an endpoint..

couchbase/N1QL
    escape everything with backticks if it is confused
        e.g. select * from `docsis_state` where `94877cb18562` is missing
    "is missing" "is null" etc are useful
    querying on partial doc_id match:
        select meta(ossstatic_data).id, * 
        from `ossstatic_data`
        where  contains(meta(ossstatic_data).id, "142D27C13C83")

restview
    workon misc, restview <path-to-file>

DHCP server
    helpful setup on gitlab
    to start things:
        kea: $ sudo keactrl start
    to see if kea is running: $ ps auxf | grep kea

testing framework
    NOTE - sip cred and OSS Static (maybe?) are NORTH. use the --north flag!
    documentation here: https://git.ent.tds.net/BxE/bxe-order-provisioning/blob/master/TESTING.md
        sometimes have to specify host or port (for static ip adapter, port = whatever)
    running integration tests:
        example command:
            bxe-order-test --hook bxe_oss_static_ip_adapter.order_testing --port 8003 --north run-chain
            (port is port of the server)
        can also be run from pycharm, if you use module name = bxe_orderprovisioning.test.test_harness
        note - to get debugging, in line 64 of bxe_orderprovisioning/test/hooks.py, change to:
            ret_val = filtered_call(self.function, kwargs) (from similar line)
    notes on creating orders:
        see this for an example: https://git.ent.tds.net/BxE/bxe-dhcp-adapter/blob/develop/tests/hosts/test_bxe_dhcp_adapter_DnO.py#L246
            (but note that it adds them to the whole library list)
        bg: @orders creates a literal python function (lol) with an attribute for orders. so to change orders, change that after the fact
        to modify the orders list for a particular test function, put a line under it like:
            "test_something.orders.orders = [<list of orders>]"
            or += probably
        can also generate orders with the generate_orders function from the lib
    troubleshooting for errors in run-chain:
        do normal run-chain
        if it breaks, filter on one that breaks, e.g.:
            bxe-order-test --port 8002 -vf -tb run-chain --filter data.cancelled_install
        this gives debug output

git guide
    https://wiki.tds.net/display/WEBMOB/TDS+Guide+to+Git+and+GitLab

    config/aliases
        $ git config -e --global
    my aliases
        cleanup
        prettygraph
    find common ancestor:
        $ git merge-base branch1 branch2
    pull from remote:
        $ git checkout --track origin/branch-name
    reset 1 file to branch:
        $ git checkout HEAD -- <file>
    show diff commits b/w branches:
        $ git log --left-right --graph --cherry-mark --oneline <b1>...<b2> (or use <b1> <b2> syntax)

    basics:
        rebase:
            $ git rebase <branch>
                where branch is the new base for current branch
        new branch:
            $ git checkout -b <name>
        change branch:
            $ git checkout <name>
            this just switches branch w/ nothing else
        commit:
            $ git commit -F <commit log file>
            commits to current branch
        push remote (new branch to upstream):
            $ git push -u origin <branch name>
            pushes it to remote repo
        if you rebase locally and want to force push to overwrite origin, do:
            $ git push -f
        Branch naming: 
            feature/BXE-####_short-feature-name
    
python general
    imports in general
        https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html
    circular imports..
        https://gist.github.com/datagrok/40bf84d5870c41a77dc6
    to start debugger on breakpoint:
        python -m pdb -c continue myscript.py
    things to try:
      pysnooper: https://github.com/cool-RR/pysnooper
    profiling performance
      good summary: https://codeyarns.com/2013/06/24/how-to-visualize-profiler-output-as-graph-using-gprof2dot/
      use gprof2dot and dot
      eg:
        python -m cProfile -o prof.stats profile_func.py
        gprof2dot prof.stats -f pstats > prof.dot
        dot -Tpng misc-connor/prof.dot  -o misc-connor/prof.png
        [view png somehow]

    mocks
        for instance attr mocks, have to mock *after* instantiation!
            or do this: https://stackoverflow.com/a/25689579/5537652

    ipython/readline woes
      https://stackoverflow.com/questions/38443907/how-does-one-set-specific-vim-bindings-in-ipython-5-0-0/38810821#38810821
      https://stackoverflow.com/questions/10394302/how-do-i-use-vi-keys-in-ipython-under-nix

    pytest
        --lf is only run last failed
        clear out *.pyc files if something weird is broken
    signal catching
      tried "except Exception as e:"... didn't work or catch ctrl-c at all
      tried "except KeyboardInterrupt as e:"... didn't work or catch ctrl-c sometimes
      https://stackoverflow.com/questions/31127652/cannot-catch-keyboardinterrupt-in-command-prompt-twice
      trying atexit I guess.. need to use globals to pass stuff to it probably

    multiprocing resources
      https://chriskiehl.com/article/parallelism-in-one-line
        https://nb4799.neu.edu/wordpress/?p=783 as an addendum on sharing data
      

flake8
    conf in ~/.config/flake8

nice python libs/utils
    bumpversion


SQL
    show table names:
        select table_name from user_tables;
    describe table;
    truncating a table: fast but foreign keys and other things cause problems. 
      eg:
        truncate table bxe_tracking.dhcp_v4_lease;
        >> truncate table bxe_tracking.dhcp_v4_lease
        >> ERROR at line 1:
        >> ORA-02266: unique/primary keys in table referenced by enabled foreign keys
      instead:
        truncate table lease_time_data;
        >> Table truncated.
        alter table lease_time_data disable constraint LEASE_TIM_DHCP_LEAS_C0D8FF26_F;
        >> Table altered.
        truncate table dhcp_v4_lease;
        >> Table truncated.
        alter table lease_time_data enable constraint LEASE_TIM_DHCP_LEAS_C0D8FF26_F;
        >> Table altered.



useful config general:
    git cleanup merged branches https://stackoverflow.com/a/21857717/5537652
    git autocomplete checkout local only https://stackoverflow.com/a/18626043/5537652


some misc thoughts:
    logging
        exception catches should always log the stack trace if not expected
        logs in general should have some sort of request/order/worker/etc identifier
        logs should have the most pertinent info at code branches (entry/exit points 
            and if/else/etc statements). not rapid-fire ones in random places

bash
    to use vi mode history scroll, hit ESC then j/k, not arrow keys
    to not save history, do this:
        $ unset HISTFILE
    to delete from history, can run history -d

tmux
    http://www.dayid.org/comp/tm.html
    tmux a - attach to most recent session
    tmux a -t <sessname> - attach to <sessname> session
    prefix d - detach (save session)
    prefix c - new window
    prefix n/p - next/prev window
    prefix C-a (double prefix) - most recent window
    prefix hkjl - select pane
    prefix z - maximize/unmaximize pane (v useful)
    prefix $ - rename session
    prefix : - do generic command
    prefix :setw synchronize-panes on/off - synchronize panes!!


ssh
    agent stuff
        useful resources: 
            https://unix.stackexchange.com/a/90869/306944
            http://rabexc.org/posts/pitfalls-of-ssh-agents
    source ~/.bash_profile to restart keychain which takes care of everything

conf files
    use $ config to manage commands

pip
    certif issues:
        right now, just add to trustedhost (edit pip conf)
        later, use Sauls' method - copy TDS CAs to {virtual_env}/lib/python3.5/site-packages/pip/_vendor/certifi/cacert.pem (but has to be done for each virtualenv)
    pip.conf locations:
        storing global one in /home/usryzd/.config/pip/pip.conf, see pip docs
        -- remove - ... see the docs... doing it all in virtualenv
        -- remove - $VIRTUAL_ENV/pip.conf
        https://pip.pypa.io/en/stable/user_guide/#config-file
    'no module named pip.req':
        use 9.0.1 (pip install pip==9.0.1)
    not hitting tds pip repos - check pipconf ($ pip config list), and/or restart (check virtualenv too)
    installing from local dir - pip install -e <dir>

django
  naming migrations - use -n/--name arg, it auto-does the numbering + filetype

useful RFCs
    2131 - DHCP - https://tools.ietf.org/html/rfc2131
    2132 - DHCP options - https://tools.ietf.org/html/rfc2132
    3046 - DHCP relay agent info - https://tools.ietf.org/html/rfc3046

general lessons
  never pass around json data to be used in multiple places. always make a class to
    serialize/deserialize. it is always worth it. ex: CurrentLeases (fixed to be good,
    for couchbase), DBWriter (still bad, uses a rabbit queue)
  figure out everyone else's business requirements! can't just make APIs to spec as written!
    this has bitten me .... 3 times or so and caused a headache each time
  when taking over a project, particularly one that isn't evidently proven to work, have to go 
    over everything with a fine-tooth comb... no part of IPT has worked properly in any way so far.
  when writing scripts, real logging, real argparsing, and crash resilience are all really helpful
    to have as boilerplate


linux tips
    uniq
        does not work as expected. only compares successive lines.
        must use sort | uniq
        or use sort -u
    interrupt a process nicely: kill -SIGINT
    diffing things nicely, 2 options:
        vim -d <things> (vimdiff)
        diff <things> | vim -R -
    count lines in file
        wc -l <file>
    sudo !! - repeat prev command
    ctrl+a - go to start of line
    replacing #012 in dhcp msg: cat misc-connor/real-msg-raw.txt | sed 's/\#012/\n/g'
    rlwrap - really useful tool
    sysadmin stuff
        top - monitor sys resources
            M - sort by mem
            P - sort by CPU
        free - see mem
        vmstat 1 - other useful stuff
            swap i/o
            cpu idle
    random things I did that were cool:
      monitor proc mem: top -c -d 1 -b | grep --line-buffered '[c]onv_events_05152019' >> ~/log/proc_mem.log
        line-buffered - obvious
        brackets - get regexed out but then cause this grep command to not show up in its own grep
    getting root access...
      https://touhidshaikh.com/blog/?p=790
      but basically:
        sudo -l to see a cmd you can sudo like less or vim
        run less as sudo
        type !sh<enter>, and you're root!
      on deployed servers:
        [sudo -l to see a valid less command]
        sudo /usr/bin/less /etc/httpd/conf/httpd.conf
        run !sh<enter>
        su daitnap1
